---
import '~/styles/index.css'
import '~/styles/heti.min.css'
import Header from '~/components/Header.astro'
import Footer from '~/components/Footer.astro'
import { SEO } from 'astro-seo'
import { getImage } from 'astro:assets'

interface Props {
  title?: string
  desc?: string
  banner?: ImageMetadata
}

const props = Astro.props as Props
const themeConfig = Astro.locals.config
const { header } = themeConfig

const defaultTitle = props.title ?? themeConfig.title
const desc = props.desc ?? themeConfig.desc
const canonical = themeConfig.website

const image = props.banner 
  ? await getImage({ src: props.banner, format: "jpeg" })
  : null

const optimizedImage = new URL(image?.src ?? "/placeholder.png", Astro.url).toString()
---

<html lang="zh">
  <head>
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <SEO
      charset="utf-8"
      title={defaultTitle}
      description={desc}
      extend={{
        link: [{ rel: 'icon', href: '/favicon.ico', type: 'image/jpg' }],
        meta: [
          { name: "twitter:image:src", content: optimizedImage },
          { name: "twitter:image:alt", content: desc },
          { name: "twitter:creator", content: header.twitter },
          { name: "twitter:site", content: header.twitter },
          { name: "twitter:card", content: "summary_large_image" },
          { name: "twitter:title", content: defaultTitle },
          { name: "twitter:description", content: desc },
        ],
      }}
      openGraph={{
        basic: {
          title: defaultTitle,
          type: "article",
          image: optimizedImage,
          url: canonical,
        }
      }}
    />
    <style>
      .loading {
        position: fixed;
        width: 100%;
        height: 100%;
        background-color: rgba(255, 255, 255, 0.8);
        display: flex;
        align-items: center;
        justify-content: center;
        top: 0;
        left: 0;
        z-index: 9999;
        opacity: 1;
        transition: opacity 0.5s ease-out; /* 添加过渡效果，时间设为0.5秒 */
      }

      .loading.hidden {
        opacity: 0;
        pointer-events: none; /* 防止点击事件影响隐藏状态 */
      }

      .spinner {
        border: 8px solid rgba(0, 0, 0, 0.1);
        border-left-color: #000;
        border-radius: 50%;
        width: 50px;
        height: 50px;
        animation: spin 2s linear infinite; /* 动画时间设为2秒 */
      }

      @keyframes spin {
        to {
          transform: rotate(360deg);
        }
      }
    </style>

    <!-- 动态标题 -->
    <script async src="/js/title.js"></script>
    <!-- 运行时间 -->
    <script async src="/js/runtime.js"></script>
    <!-- 卜算子js -->
    <script async src="//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js"></script>
    <!-- 自建umami统计代码 -->
    <script defer src="https://statistics.zhengweixin.top/script.js" data-website-id="7441ce23-3587-41b6-8919-e42932fc65d7"></script>


  </head>
  <body>
    <div id="loading" class="loading">
      <div class="spinner"></div>
    </div>
    <div un-max-lg="animate-fadein-down" un-lg="flex flex-row-reverse justify-between gap-4 px-8 mx-auto max-w-6xl" class="container contain-layout m-a">
      <div un-lg="sticky top-0 h-screen py-20 animate-fadein-left gap-8" un-lg:flex="~ col justify-between items-start gap-4" class="p-7.5">
        <Header />
        <Footer class="max-lg:hidden" />
      </div>
      <main un-lg="py-20 min-w-xl animate-fadein-down" class="p-7.5">
        <slot />
      </main>
      <footer class="lg:hidden p-7.5">
        <!-- 这里是移动端的Footer 因为有点问题，不知道怎么整，所有没写 -->
      </footer>
    </div>
    <!-- 控制台输出 -->
    <script src="/js/console-log.js" is:inline></script>
    <script>
      document.addEventListener("DOMContentLoaded", function() {
        const loading = document.getElementById("loading");
        if (loading) {
          setTimeout(() => {
            loading.classList.add('hidden');
          }, 500); // 0.5秒后触发隐藏动画
        }
      });
    </script>
  </body>
</html>
